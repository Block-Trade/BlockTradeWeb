{"version":3,"sources":["app/actions/auth.js","app/actions/connection.js"],"names":["signup","formData","dispatch","a","headers","axios","post","res","console","log","data","message","type","payload","response","msg","activateUser","token","body","loadUser","localStorage","setAuthToken","get","login","companyInfo","companyFormData","clearMsg","clearError","getAllConn","loadWeb3","web3","window","eth","getAccounts","accounts","getBalance","ethBalance","abi","Trades","net","getId","networkId","tradesData","networks","address","trades","Contract","abi2","Main","mainData","main","alert","ethereum","Web3","enable","currentProvider"],"mappings":"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","file":"static/js/5.2a9bc49f.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\nexport const signup = ({ formData }) => async (dispatch) => {\r\n  try {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n    const res = await axios.post('/signup', formData, {\r\n      headers: headers,\r\n    });\r\n    console.log(res.data.message);\r\n\r\n    dispatch({\r\n      type: 'SIGNUP_SUCCESS',\r\n      payload: res.data.message,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: 'SIGNUP_ERROR',\r\n      payload: err.response.data.msg,\r\n    });\r\n  }\r\n};\r\n\r\nexport const activateUser = ({ token }) => async (dispatch) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n  console.log(token);\r\n  const body = {\r\n    token,\r\n  };\r\n  try {\r\n    const res = await axios.post('/activate', body, {\r\n      headers: headers,\r\n    });\r\n    console.log(res.data.msg);\r\n    dispatch({\r\n      type: 'ACTIVATE_SUCCESS',\r\n      payload: res.data.msg,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: 'ACTIVATE_ERROR',\r\n      payload: err.response.data.msg,\r\n    });\r\n  }\r\n};\r\n\r\nexport const loadUser = () => async (dispatch) => {\r\n  // @todo - load token into global header\r\n  console.log('Load user');\r\n  if (localStorage.token) {\r\n    console.log(localStorage.token);\r\n    setAuthToken({ token: localStorage.token });\r\n  }\r\n  try {\r\n    const res = await axios.get('/login');\r\n    console.log(res);\r\n    dispatch({\r\n      type: 'USER_LOADED',\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: 'AUTH_ERROR',\r\n    });\r\n  }\r\n};\r\n\r\nexport const login = ({ formData, loadUser }) => async (dispatch) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  try {\r\n    const res = await axios.post('/login', formData, {\r\n      headers: headers,\r\n    });\r\n    console.log(res);\r\n    dispatch({\r\n      type: 'LOGIN_SUCCESS',\r\n      payload: res.data,\r\n    });\r\n    await loadUser();\r\n  } catch (err) {\r\n    console.log(err.response.data.msg);\r\n    dispatch({\r\n      type: 'LOGIN_ERROR',\r\n      payload: err.response.data.msg,\r\n    });\r\n  }\r\n};\r\n\r\nexport const companyInfo = (companyFormData) => async (dispatch) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  try {\r\n    const res = await axios.post('/companyInfo', companyFormData, {\r\n      headers: headers,\r\n    });\r\n\r\n    console.log(res);\r\n    dispatch({\r\n      type: 'COMPANY_INFO_LOADED',\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const clearMsg = () => async (dispatch) => {\r\n  dispatch({\r\n    type: 'CLEAR_MSG',\r\n  });\r\n};\r\n\r\nexport const clearError = () => async (dispatch) => {\r\n  dispatch({\r\n    type: 'CLEAR_ERROR',\r\n  });\r\n};\r\n","import Trades from '../../abis/Trades.json';\r\nimport Main from '../../abis/Main.json';\r\nimport Web3 from 'web3';\r\n\r\nexport const getAllConn = () => async (dispatch) => {\r\n  await loadWeb3();\r\n\r\n  const web3 = window.web3;\r\n\r\n  const accounts = await web3.eth.getAccounts();\r\n  //this.setState({ account: accounts[0] });\r\n  console.log(accounts[0]);\r\n  dispatch({\r\n    type: 'SET_ACCOUNT',\r\n    payload: accounts[0],\r\n  });\r\n\r\n  let ethBalance = await web3.eth.getBalance(accounts[0]);\r\n  //this.setState({ ethBalance: ethBalance });\r\n  console.log(ethBalance);\r\n\r\n  const abi = Trades.abi;\r\n  const networkId = await web3.eth.net.getId();\r\n  const tradesData = Trades.networks[networkId];\r\n  if (tradesData) {\r\n    // window.alert('Trades Contract deployed to detected network');\r\n    const address = tradesData.address;\r\n    const trades = new web3.eth.Contract(abi, address);\r\n    dispatch({\r\n      type: 'SET_TRADES_CONTRACT',\r\n      payload: trades,\r\n    });\r\n  } else {\r\n    // window.alert('Trades contract not deployed to detected network')\r\n  }\r\n\r\n  const abi2 = Main.abi;\r\n  //console.log(Main);\r\n  //const networkId = await web3.eth.net.getId();\r\n  const mainData = Main.networks[networkId];\r\n  if (mainData) {\r\n    // window.alert('Token(Main) Contract deployed to detected network');\r\n    console.log(mainData.address);\r\n    const address = mainData.address;\r\n    const main = new web3.eth.Contract(abi2, address);\r\n    dispatch({\r\n      type: 'SET_MAIN_CONTRACT',\r\n      payload: main,\r\n    });\r\n  } else {\r\n    window.alert('Token(Main) contract not deployed to detected network');\r\n  }\r\n\r\n  //loadBlockchainData();\r\n};\r\n\r\nexport const loadWeb3 = async () => {\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum);\r\n    console.log('window.web3');\r\n    await window.ethereum.enable();\r\n  } else if (window.web3) {\r\n    console.log('window.web3//');\r\n    window.web3 = new Web3(window.web3.currentProvider);\r\n  } else {\r\n    window.alert(\r\n      'Non-Ethereum browser detected. You should consider trying MetaMask!'\r\n    );\r\n  }\r\n};\r\n\r\n/*\r\nexport const loadBlockchainData = () => async (dispatch) => {\r\n  const web3 = window.web3;\r\n\r\n  const accounts = await web3.eth.getAccounts();\r\n  //this.setState({ account: accounts[0] });\r\n  console.log(accounts[0]);\r\n\r\n  let ethBalance = await web3.eth.getBalance(accounts[0]);\r\n  //this.setState({ ethBalance: ethBalance });\r\n  console.log(ethBalance);\r\n\r\n  const abi = Trades.abi;\r\n  const networkId = await web3.eth.net.getId();\r\n  const tradesData = Trades.networks[networkId]\r\n  if (tradesData) {\r\n    window.alert(\"Trades Contract deployed to detected network\");\r\n    const address = tradesData.address\r\n    const trades = new web3.eth.Contract(abi, address)\r\n    console.log(trades);\r\n    dispatch({\r\n      type: 'SET_TRADES_CONTRACT',\r\n      payload: trades\r\n    })\r\n  } else {\r\n    window.alert('Trades contract not deployed to detected network')\r\n  }\r\n};\r\n*/\r\n"],"sourceRoot":""}